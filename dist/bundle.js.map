{"version":3,"sources":["webpack/bootstrap","./src/ball.js","./src/brick.js","./src/game_screen.js","./src/index.js","./src/paddle.js","./src/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,eAAe,mBAAO,CAAC,iCAAU;AACjC,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB,qBAAqB;AAC1C,uBAAuB,0BAA0B;AACjD;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT,kBAAkB;AAClB,SAAS;AACT,kBAAkB;AAClB;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,aAAa;AAChC;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;AClXA,mBAAmB,mBAAO,CAAC,2CAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class Ball {\n  constructor(canvas, ctx, xPos, yPos, radius, color) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.x = xPos;\n    this.y = yPos;\n    this.radius = radius;\n    this.dx = 0;\n    this.dy = 6;\n    this.color = color;\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n    this.ctx.closePath();\n  }\n\n  move() {\n    this.x += this.dx;\n    this.y += this.dy;\n  }\n}\n\nmodule.exports = Ball;\n","class Brick {\n  constructor(ctx, pos, width, height) {\n    this.ctx = ctx;\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    this.visible = true;\n  }\n\n  draw() {\n    if (this.visible) {\n      this.ctx.beginPath();\n      this.ctx.rect(this.pos[0], this.pos[1], this.width, this.height);\n      // this.ctx.closePath();\n      this.ctx.fillStyle = \"orange\";\n      this.ctx.fill();\n      this.ctx.strokeStyle = \"purple\";\n      this.ctx.stroke();\n      this.ctx.closePath();\n    }\n  }\n}\n\nmodule.exports = Brick;\n","const Ball = require(\"./ball\");\nconst Paddle = require(\"./paddle\");\nconst Util = require(\"./util\");\nconst Brick = require(\"./brick\");\n\nclass GameScreen {\n  constructor(canvas, ctx) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.collidedPaddle = false;\n\n    //Game start\n    this.playing = false;\n\n    //Game won\n    this.won = false;\n\n    //Score Information\n    this.score = 0;\n\n    //Lives Information\n    this.lives = 0;\n\n    //Information for paddle\n    this.paddleRadius = 90;\n    this.paddle = new Paddle(canvas, ctx, canvas.width / 2, this.paddleRadius, this.getRandomColor());\n\n    // Information for ball\n    this.ballRadius = 10;\n    this.ball = new Ball(canvas, ctx, canvas.width / 2, canvas.height - 2 * this.paddleRadius, this.ballRadius, this.getRandomColor());\n\n    // Information for bricks\n    this.brickRows = 4;\n    this.brickCols = 9;\n    this.bricks = this.populateBricks(this.brickRows, this.brickCols);\n\n    this.rightKeyDown = false;\n    this.leftKeyDown = false;\n\n    this.draw = this.draw.bind(this);\n    // this.keyDownEventHandler = this.keyDownEventHandler.bind(this);\n    // this.keyUpEventHandler = this.keyUpEventHandler.bind(this);\n    this.startGameHandler = this.startGameHandler.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.wallCollision = this.wallCollision.bind(this);\n  }\n\n  startGameHandler(e) {\n    this.playing = true;\n    this.draw();\n  }\n\n  keyDownEventHandler(e) {\n    if (e.keyCode === 39) {\n      this.rightKeyDown = true;\n    } else if (e.keyCode === 37) {\n      this.leftKeyDown = true;\n    }\n  }\n\n  keyUpEventHandler(e) {\n    if (e.keyCode === 39) {\n      this.rightKeyDown = false;\n    } else if (e.keyCode === 37) {\n      this.leftKeyDown = false;\n    }\n  }\n\n  mouseMoveHandler(e) {\n    const relativeX = e.clientX;\n    const body = document.getElementById(\"body\");\n\n    if (relativeX - body.offsetWidth * 0.35 - this.paddle.radius > 0 && relativeX + this.paddle.radius < body.offsetWidth * 0.35 + this.canvas.width) {\n        this.paddle.x = relativeX - body.offsetWidth * 0.35;\n    }\n  }\n\n  drawPlayGameMessage(ctx, canvas) {\n    ctx.font = \"bold 45px Comic Sans MS\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\"Click to Play\", canvas.width / 4.4, canvas.height / 2);\n  }\n\n  drawWinningMessage(ctx, canvas) {\n    ctx.font = \"bold 45px Comic Sans MS\";\n    ctx.fillStyle = \"grey\";\n    ctx.fillText(\"Cleared!\", canvas.width / 3.2, canvas.height / 2);\n    ctx.font = \"bold 30px Comic Sans MS\";\n    ctx.fillStyle = \"lightergrey\";\n    ctx.fillText(\"Click to play again!\", canvas.width / 4.4, canvas.height / 2 + 45);\n  }\n\n  drawGameOverMessage(ctx, canvas) {\n    ctx.font = \"bold 45px Comic Sans MS\";\n    ctx.fillStyle = \"grey\";\n    ctx.fillText(\"Game Over!\", canvas.width / 4, canvas.height / 2);\n    ctx.font = \"bold 30px Comic Sans MS\";\n    ctx.fillStyle = \"lightergrey\";\n    ctx.fillText(\"Click to try again!\", canvas.width / 4.2, canvas.height / 2 + 45);\n  }\n\n  drawScore(ctx, score) {\n    ctx.font = \"bold 22px Comic Sans MS\";\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fillText(\"Score: \" + score, 5, 24);\n  }\n\n  drawLives(ctx, lives) {\n    ctx.font = \"bold 22px Comic Sans MS\";\n    ctx.fillStyle = \"#0095DD\";\n    ctx.fillText(\"Lives: \" + lives, 410, 24);\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw paddle\n    this.paddle.draw();\n\n    // Draw ball\n    this.ball.draw();\n\n    //Draw score\n    this.drawScore(this.ctx, this.score);\n\n    //Draw lives\n    this.drawLives(this.ctx, this.lives);\n\n    // Draw bricks\n    this.bricks.forEach(row => {\n      row.forEach(brick => brick.draw());\n    })\n\n    const ballBrickCollision = this.ballCollidedBrick(this.ball, this.bricks);\n\n    if (ballBrickCollision.collided) {\n      let newBallColor = this.getRandomColor();\n      while (newBallColor === this.ball.color) {\n        newBallColor = this.getRandomColor();\n      }\n      this.ball.color = newBallColor;\n\n      if (ballBrickCollision.collidedBottom) {\n        this.ball.dy = -1 * this.ball.dy;\n      } else if (ballBrickCollision.collidedSide) {\n        this.ball.dx = -1 * this.ball.dx;\n      } else if (ballBrickCollision.collidedTop) {\n        this.ball.dy = -1 * this.ball.dy;\n      }\n      this.bricks[ballBrickCollision.pos[0]][ballBrickCollision.pos[1]].visible = false;\n\n      this.score += 7;\n    }\n\n    this.paddleCollision(this.ball, this.paddle, this.ctx);\n\n    this.wallCollision(this.ball, this.canvas, this.paddle);\n\n    // document.addEventListener(\"keydown\", this.keyDownEventHandler, false);\n    // document.addEventListener(\"keyup\", this.keyUpEventHandler, false);\n    document.addEventListener(\"mousemove\", this.mouseMoveHandler, false);\n\n    this.ball.move();\n    //this.paddle.move(this.leftKeyDown, this.rightKeyDown);\n\n    //Draw win message\n    if (this.score === this.brickRows * this.brickCols * 7) {\n      this.playing = false;\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height / 2);\n      this.ball.draw();\n      this.drawScore(this.ctx, this.score);\n      this.drawLives(this.ctx, this.lives);\n      this.drawWinningMessage(this.ctx, this.canvas);\n      document.addEventListener(\"click\", () => document.location.reload(), false);\n      // document.location.reload();\n    }\n\n    if (this.playing) {\n      requestAnimationFrame(this.draw);\n    } else if (this.score < this.brickRows * this.brickCols * 7) {\n      this.drawPlayGameMessage(this.ctx, this.canvas);\n      document.addEventListener(\"click\", this.startGameHandler, false);\n    }\n\n  }\n\n  wallCollision(ball, canvas, paddle) {\n    const topWallCollide = ball.y + ball.dy <= ball.radius + 30;\n    const bottomWallCollide = ball.y + ball.dy > canvas.height - ball.radius;\n    const leftWallCollide = ball.x + ball.dx <= ball.radius;\n    const rightWallCollide = ball.x + ball.dx > canvas.width - ball.radius;\n\n    if (bottomWallCollide) {\n      if (this.lives > 0) {\n        this.lives -= 1;\n        ball.x = canvas.width / 2;\n        ball.y = canvas.height - 2 * this.paddleRadius;\n        ball.dx = 0;\n        ball.dy = 6;\n\n        paddle.x = canvas.width / 2;\n        paddle.y = canvas.height;\n      } else {\n        this.drawGameOverMessage(this.ctx, this.canvas);\n        document.addEventListener(\"click\", () => document.location.reload(), false);\n      }\n    } else {\n      if (topWallCollide) {\n        ball.dy = -ball.dy;\n        ball.y += ball.dy;\n      }\n\n      if (leftWallCollide || rightWallCollide) {\n        ball.dx = -ball.dx;\n        ball.x += ball.dx;\n      }\n\n      this.collidedPaddle = false;\n    }\n  }\n\n  ballCollidedBrick(ball, bricks) {\n\n    const ballPos = [ball.x, ball.y];\n\n    for (let row = 0; row < bricks.length; row++) {\n      for (let col = 0; col < bricks[row].length; col++) {\n        const brick = bricks[row][col];\n\n        if (!brick.visible) {\n          continue;\n        }\n\n        const brickPos = brick.pos;\n\n        const ballInXRange = ballPos[0] > brickPos[0] && ballPos[0] < brickPos[0] + brick.width;\n        const ballInYRange = ballPos[1] > brickPos[1] && ballPos[1] < brickPos[1] + brick.height;\n        const ballTouchBrickBottom = ballPos[1] - ball.radius <= brickPos[1] + brick.height;\n        const ballTouchBrickTop = ballPos[1] + ball.radius >= brickPos[1] && ball[1] + ball.radius < brickPos[1] + brick.height;\n\n        const ballTouchBrickLeft = ballPos[0] < brickPos[0] && ballPos[0] + ball.radius >= brickPos[0];\n        const ballTouchBrickRight = ballPos[0] > brickPos[0] && ballPos[0] - ball.radius <= brickPos[0] + brick.width;\n\n        const a = ballInYRange && ballTouchBrickLeft;\n        const b = ballInYRange && ballTouchBrickRight;\n        // Case 1: Ball touches bottom of brick\n        if (ballInXRange && ballTouchBrickBottom) {\n          return {collided: true, pos: [row, col], collidedBottom: true};\n        } else if ((a) || (b)) {\n          return {collided: true, pos: [row, col], collidedSide: true};\n        } else if (ballInXRange && ballTouchBrickTop) {\n          return {collided: true, pos: [row, col], collidedTop: true};\n        }\n      }\n    }\n\n    return {collided: false};\n  }\n\n  dyRequirePositive(ball, originalY, dyNew) {\n    while (dyNew + ball.y >= originalY) {\n      if (dyNew > 0) {\n        dyNew *= -1;\n      }\n\n      // dyNew -= dyNew;\n      // if (dyNew === 0) {\n      //   console.warn('0 case');\n      //   dyNew -= 6;\n      // }\n      // console.warn('Original Y Value: ' + originalY);\n      // console.warn('New Y Value: ' + (dyNew + ball.y));\n    }\n\n    return dyNew;\n  }\n\n  paddleCollision(ball, paddle, ctx) {\n\n    const nextX = ball.x + ball.dx;\n    const nextY = ball.y + ball.dy;\n    const dist = Util.distance([nextX, nextY], [paddle.x, paddle.y]);\n\n    if (dist <= ball.radius + paddle.radius) {\n      if (this.collidedPaddle) {\n        // console.error('Ignoring');\n        // console.error('y');\n        // console.log(ball.y);\n        // console.error('x');\n        // console.log(ball.x);\n        return;\n      } else {\n        // console.error('1st collision');\n        // console.error('initial y');\n        // console.error(ball.y);\n        // console.error('initial x');\n        // console.error(ball.x);\n        // console.error('initial dy');\n        // console.error(ball.dy);\n        // console.error('initial dx');\n        // console.error(ball.dx);\n      }\n\n      const originalY = ball.y;\n\n      const distX = ball.x - paddle.x;\n      const distY = ball.y - paddle.y;\n      const dx = ball.dx;\n      const dy = -1 * ball.dy;\n\n      let dxNew = ((-1 / Math.pow(dist, 2)) * ((Math.pow(distX, 2) - Math.pow(distY, 2)) * dx - (2 * distX * distY * dy)));\n      let dyNew = ((1 / Math.pow(dist, 2)) * ((Math.pow(distY, 2) - Math.pow(distX, 2)) * dy - (2 * distX * distY * dx)));\n\n      const hypo = Util.hypotenuse(dxNew, dyNew);\n      const wantedSpeed = Util.hypotenuse(6, 6);\n      const ratio = hypo / wantedSpeed;\n\n      dxNew = dxNew / ratio;\n      dyNew = dyNew / ratio;\n\n      dyNew = this.dyRequirePositive(ball, originalY, dyNew);\n\n      ball.dx = dxNew;\n      ball.dy = dyNew;\n\n      ball.x += ball.dx;\n      ball.y += ball.dy;\n\n      // console.log(\"hit\");\n      // console.log('dy after');\n      // console.log(ball.dy);\n      // console.log('dx after');\n      // console.log(ball.dx);\n      // console.log('y after');\n      // console.log(ball.y);\n      // console.log('x after');\n      // console.log(ball.x);\n\n      paddle.color = this.getRandomColor();\n      this.collidedPaddle = true;\n    }\n    this.collidedPaddle = false;\n  }\n\n  populateBricks(numRows, numCols) {\n    const bricks = [];\n    const topPadding = 40;\n\n    for (let i = 0; i < numRows; i++) {\n      const row = [];\n      for (let j = 0; j < numCols; j++) {\n        row.push(new Brick(this.ctx, [j * (this.canvas.width / numCols), topPadding + i * (this.canvas.height / 3.5 / numRows)], (this.canvas.width - topPadding) / numCols, 15));\n      }\n      bricks.push(row);\n    }\n    return bricks;\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n}\n\nmodule.exports = GameScreen;\n","const GameScreen = require(\"./game_screen\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"myCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  console.log(\"Webpack is working!\");\n  new GameScreen(canvas, ctx).draw();\n});\n","class Paddle {\n  constructor(canvas, ctx, xPos, paddleRadius, color) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.x = xPos;\n    this.y = canvas.height;\n    this.radius = paddleRadius;\n    this.color = color;\n  }\n\n  draw() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.canvas.height, this.radius, Math.PI, 2 * Math.PI);\n    // this.ctx.closePath();\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n    this.ctx.closePath();\n    // this.ctx.strokeStyle = \"blue\";\n    // this.ctx.stroke();\n  }\n\n  move(leftKeyDown, rightKeyDown) {\n    if (rightKeyDown && this.x + 50 + 0.5 <= this.canvas.width) {\n      this.x += 2;\n    } else if (leftKeyDown && this.x - 50 - 0.5 >= 0) {\n      this.x -= 2;\n    }\n  }\n}\n\nmodule.exports = Paddle;\n","const Util = {\n  distance: function(pos1, pos2) {\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n\n    const dx = Math.abs(x1 - x2);\n    const dy = Math.abs(y1 - y2);\n\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n  },\n\n  hypotenuse: function(a, b) {\n    return Math.sqrt(Math.abs(a * a) + Math.abs(b * b));\n  }\n}\n\nmodule.exports = Util;\n"],"sourceRoot":""}